
R version 4.2.3 (2023-03-15 ucrt) -- "Shortstop Beagle"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "UsingR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('UsingR')
Loading required package: MASS
Loading required package: HistData
Loading required package: Hmisc

Attaching package: 'Hmisc'

The following objects are masked from 'package:base':

    format.pval, units

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BushApproval")
> ### * BushApproval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BushApproval
> ### Title: U.S. President George Bush approval ratings
> ### Aliases: BushApproval
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(BushApproval)
> attach(BushApproval)
> 
> ## Plot data with confidence intervals. Each poll gets different line type
> ## no points at first
> plot(strptime(date,"%m/%d/%y"),approval,type="n",
+      ylab = "Approval Rating",xlab="Date",
+      ylim=c(30,100)
+      )
> 
> ## plot line for CI. Margin or error about 3
> ## matlines has trouble with dates from strptime()
> colors = rainbow(6)
> 
> for(i in 1:nrow(BushApproval)) {
+   lines(rep(strptime(date[i],"%m/%d/%y"),2),
+         c(approval[i]-3,approval[i]+3),
+         lty=as.numeric(who[i]),
+         col=colors[as.numeric(who[i])]
+         )
+   
+ }
> 
> ## plot points
> points(strptime(date,"%m/%d/%y"),approval,pch=as.numeric(who))
> 
> ## add legend
> legend((2003-1970)*365*24*60*60,90,legend=as.character(levels(who)),lty=1:6,col=1:6)
> detach(BushApproval)
> 
> 
> 
> cleanEx()
> nameEx("DOTplot")
> ### * DOTplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DOTplot
> ### Title: Make big DOT plot likestripchart
> ### Aliases: DOTplot DOTplot.default DOTplot.formula DOTplt DOTplot.formula
> ### Keywords: hplot
> 
> ### ** Examples
> 
> x = c(1,1,2,3,5,8)
> DOTplot(x,main="Fibonacci",cex=2)
> 
> 
> 
> cleanEx()
> nameEx("DensityPlot")
> ### * DensityPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DensityPlot
> ### Title: Plots densities of data
> ### Aliases: DensityPlot DensityPlot.default DensityPlot.formula
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## taken from boxplot
> ## using a formula
> data(InsectSprays)
> DensityPlot(count ~ spray, data = InsectSprays)
> ## on a matrix (data frame)
> mat <- cbind(Uni05 = (1:100)/21, Norm = rnorm(100),
+              T5 = rt(100, df = 5), Gam2 = rgamma(100, shape = 2))
> DensityPlot(data.frame(mat))
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("HUMMER")
> ### * HUMMER
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: HUMMER
> ### Title: Deliveries of new HUMMER vehicles
> ### Aliases: HUMMER
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(HUMMER)
> plot(HUMMER)
> 
> 
> 
> cleanEx()
> nameEx("KSI")
> ### * KSI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: KSI
> ### Title: Data set on automobile deaths and injuries in Great Britain
> ### Aliases: KSI
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(KSI)
> plot(KSI)
> seatbelt = time(KSI) < 1983 + (2-1)/12
> 
> 
> 
> 
> cleanEx()
> nameEx("MLBattend")
> ### * MLBattend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MLBattend
> ### Title: Major league baseball attendance data
> ### Aliases: MLBattend
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(MLBattend)
> boxplot(attendance ~ franchise, MLBattend)
> with(MLBattend, cor(attendance,wins))
[1] 0.4584821
> 
> 
> 
> cleanEx()
> nameEx("Medicare")
> ### * Medicare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Medicare
> ### Title: Sample from "Medicare Provider Charge Data"
> ### Aliases: Medicare
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Medicare)
> 
> 
> 
> cleanEx()
> nameEx("OBP")
> ### * OBP
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: OBP
> ### Title: On base percentage for 2002 major league baseball season
> ### Aliases: OBP
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(OBP)
> hist(OBP)
> OBP[OBP>.5]			# who is better than 50%? (only Barry Bonds)
bondsba01 
0.5816993 
> 
> 
> 
> cleanEx()
> nameEx("ObamaApproval")
> ### * ObamaApproval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ObamaApproval
> ### Title: Approval ratings for President Obama
> ### Aliases: ObamaApproval
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(ObamaApproval)
> 
> 
> 
> cleanEx()
> nameEx("QQplot")
> ### * QQplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: QQplot
> ### Title: Creates a qqplot with shaded density estimate
> ### Aliases: QQplot
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> x = rnorm(100)
> y = rt(100, df=3)
> QQplot(x,y)
> 
> 
> 
> 
> cleanEx()
> nameEx("SAT")
> ### * SAT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SAT
> ### Title: SAT data with expenditures
> ### Aliases: SAT
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(SAT)
> 
> 
> 
> cleanEx()
> nameEx("Split.zoo")
> ### * Split.zoo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Split.zoo
> ### Title: Add split method for zoo objects
> ### Aliases: Split.zoo
> ### Keywords: misc
> 
> ### ** Examples
> 
> if(require(zoo)) {
+ split.zoo = Split.zoo ## make generic
+ x = zoo(1:30,1:30)
+ f = sample(letters[1:5],30, replace=TRUE)
+ split(x,f)
+ }
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

    a  d  b  e  c
1   1 NA NA NA NA
2  NA  2 NA NA NA
3   3 NA NA NA NA
4  NA NA  4 NA NA
5  NA NA NA  5 NA
6  NA NA NA NA  6
7  NA NA  7 NA NA
8  NA NA NA NA  8
9  NA NA NA NA  9
10 10 NA NA NA NA
11 NA NA NA 11 NA
12 NA NA NA 12 NA
13 NA NA 13 NA NA
14 NA NA 14 NA NA
15 15 NA NA NA NA
16 NA NA NA 16 NA
17 NA NA NA 17 NA
18 18 NA NA NA NA
19 19 NA NA NA NA
20 NA NA NA 20 NA
21 NA NA NA 21 NA
22 NA NA 22 NA NA
23 NA NA 23 NA NA
24 24 NA NA NA NA
25 NA 25 NA NA NA
26 26 NA NA NA NA
27 NA 27 NA NA NA
28 NA NA NA NA 28
29 NA NA 29 NA NA
30 NA NA 30 NA NA
> 
> 
> 
> cleanEx()

detaching 'package:zoo'

> nameEx("age.universe")
> ### * age.universe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: age.universe
> ### Title: Best estimate of the age of the universe
> ### Aliases: age.universe
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(age.universe)
> n <- nrow(age.universe)
> x <- 1:n
> names(x) = age.universe$year
> plot(x,age.universe$upper,ylim=c(0,20))
> points(x,age.universe$lower)
> with(age.universe,sapply(x,function(i) lines(c(i,i),c(lower[i],upper[i]))))
$`1760`
NULL

$`1831`
NULL

$`1852`
NULL

$`1897`
NULL

$`1929`
NULL

$`1970`
NULL

$`1980`
NULL

$`1996`
NULL

$`1997`
NULL

$`1999`
NULL

$`1999`
NULL

$`2001`
NULL

$`2002`
NULL

$`2003`
NULL

$`2003`
NULL

$`2013`
NULL

> 
> 
> 
> cleanEx()
> nameEx("aid")
> ### * aid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aid
> ### Title: monthly payment for federal program
> ### Aliases: aid
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(aid)
> hist(aid)
> 
> 
> 
> cleanEx()
> nameEx("alaska.pipeline")
> ### * alaska.pipeline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alaska.pipeline
> ### Title: Comparison of in-field and laboratory measurement of defects
> ### Aliases: alaska.pipeline
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(alaska.pipeline)
> res = lm(lab.defect ~ field.defect, alaska.pipeline)
> plot(lab.defect ~ field.defect, alaska.pipeline)
> abline(res)
> plot(fitted(res),resid(res))
> 
> 
> 
> cleanEx()
> nameEx("alltime.movies")
> ### * alltime.movies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alltime.movies
> ### Title: Top movies of all time
> ### Aliases: alltime.movies
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(alltime.movies)
> hist(alltime.movies$Gross)
> 
> 
> 
> cleanEx()
> nameEx("answers")
> ### * answers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: answers
> ### Title: Answers to selected problems
> ### Aliases: answers
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## answers()
> 
> 
> 
> cleanEx()
> nameEx("aosat")
> ### * aosat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aosat
> ### Title: Artic Oscillation data based on SAT data
> ### Aliases: aosat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(aosat)
> ## Not run: 
> ##D library(zoo)
> ##D z = zoo(aosat[,2], order.by=aosat[,1])
> ##D plot(z)
> ##D ## yearly
> ##D plot(aggregate(z, floor(index(z)), mean))
> ##D ## decade-long means
> ##D plot(aggregate(z, 10*floor(index(z)/10), mean))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("arctic.oscillations")
> ### * arctic.oscillations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: arctic.oscillations
> ### Title: Measurement of sea-level pressure at the arctic
> ### Aliases: arctic.oscillations
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(arctic.oscillations)
> x = ts(arctic.oscillations, start=c(1899,1), frequency=12)
> plot(x)
> 
> 
> 
> cleanEx()
> nameEx("babies")
> ### * babies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: babies
> ### Title: Mothers and their babies data
> ### Aliases: babies
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(babies)
> plot(wt ~ factor(smoke), data=babies)
> plot(wt1 ~ dwt, data=babies, subset=wt1 < 800 & dwt < 800)
> 
> 
> 
> cleanEx()
> nameEx("babyboom")
> ### * babyboom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: babyboom
> ### Title: Babyboom: data for 44 babies born in one 24-hour period.
> ### Aliases: babyboom
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(babyboom)
> hist(babyboom$wt)
> hist(diff(babyboom$running.time))
> 
> 
> 
> cleanEx()
> nameEx("batting")
> ### * batting
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: batting
> ### Title: Batting statistics for 2002 baseball season
> ### Aliases: batting
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(batting)
> attach(batting)
> BA = H/AB			# batting average
> OBP = (H + BB + HBP) / (AB + BB + HBP + SF) # On base "percentage"
> 
> 
> 
> cleanEx()

detaching 'batting'

> nameEx("baycheck")
> ### * baycheck
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: baycheck
> ### Title: Population estimate of type of Bay Checkerspot butterfly
> ### Aliases: baycheck
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(baycheck)
> plot(Nt ~ year,baycheck)
> ## fit Ricker model N_{t+1} = N_t e^{-rt}W_t
> n = length(baycheck$year)
> yt = with(baycheck,log(Nt[-1]/Nt[-n]))
> nt = with(baycheck,Nt[-n])
> lm(yt ~ nt,baycheck)

Call:
lm(formula = yt ~ nt, data = baycheck)

Coefficients:
(Intercept)           nt  
  0.3458097   -0.0004088  

> 
> 
> 
> cleanEx()
> nameEx("best.times")
> ### * best.times
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: best.times
> ### Title: Best track and field times by age and distance
> ### Aliases: best.times
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(best.times)
> attach(best.times)
> by.dist = split(best.times,as.factor(Dist))
> lm(scale(Time) ~ age, by.dist[['400']])

Call:
lm(formula = scale(Time) ~ age, data = by.dist[["400"]])

Coefficients:
(Intercept)          age  
   -3.01203      0.04819  

> dists = names(by.dist)
> lapply(dists, function(n) print(lm(scale(Time) ~ age, by.dist[[n]])))

Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -2.43879      0.03752  


Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -3.05084      0.04694  


Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -3.01203      0.04819  


Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -2.82503      0.04346  


Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -2.73766      0.04212  


Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -3.09846      0.04958  


Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -2.74438      0.04222  


Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -3.04411      0.04871  


Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
    -2.9123       0.0466  

[[1]]

Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -2.43879      0.03752  


[[2]]

Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -3.05084      0.04694  


[[3]]

Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -3.01203      0.04819  


[[4]]

Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -2.82503      0.04346  


[[5]]

Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -2.73766      0.04212  


[[6]]

Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -3.09846      0.04958  


[[7]]

Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -2.74438      0.04222  


[[8]]

Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
   -3.04411      0.04871  


[[9]]

Call:
lm(formula = scale(Time) ~ age, data = by.dist[[n]])

Coefficients:
(Intercept)          age  
    -2.9123       0.0466  


> 
> 
> 
> cleanEx()

detaching 'best.times'

> nameEx("blood")
> ### * blood
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: blood
> ### Title: blood pressure readings
> ### Aliases: blood
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(blood)
> attach(blood)
> t.test(Machine,Expert)

	Welch Two Sample t-test

data:  Machine and Expert
t = 0.21725, df = 27.49, p-value = 0.8296
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
 -8.436495 10.436495
sample estimates:
mean of x mean of y 
     85.6      84.6 

> detach(blood)
> 
> 
> 
> cleanEx()
> nameEx("breakdown")
> ### * breakdown
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: breakdown
> ### Title: Time of insulating fluid to breakdown
> ### Aliases: breakdown
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(breakdown)
> plot(log(time) ~ voltage, data = breakdown)
> 
> 
> 
> cleanEx()
> nameEx("bright.stars")
> ### * bright.stars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bright.stars
> ### Title: List of bright stars with Hipparcos catalog number
> ### Aliases: bright.stars
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(bright.stars)
> all.names  = paste(bright.stars$name, sep="", collapse="")
> x = unlist(strsplit(tolower(all.names), ""))
> letter.dist = sapply(letters, function(i) sum(x == i))
> data(scrabble)			#  for frequency info
> p = scrabble$frequency[1:26];p=p/sum(p)
> chisq.test(letter.dist, p=p)	# compare with English

	Chi-squared test for given probabilities

data:  letter.dist
X-squared = 260.73, df = 25, p-value < 2.2e-16

> 
> 
> 
> cleanEx()
> nameEx("brightness")
> ### * brightness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: brightness
> ### Title: Brightness of 966 stars
> ### Aliases: brightness
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(brightness)
> hist(brightness)
> 
> 
> 
> cleanEx()
> nameEx("bumpers")
> ### * bumpers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bumpers
> ### Title: Bumper repair costs for various automobiles
> ### Aliases: bumpers
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(bumpers)
> stem(bumpers)

  The decimal point is 3 digit(s) to the right of the |

  0 | 68
  1 | 333556
  2 | 000123445
  3 | 011233

> 
> 
> 
> cleanEx()
> nameEx("bycatch")
> ### * bycatch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bycatch
> ### Title: Number of Albatrosses accidentaly caught during a fishing haul
> ### Aliases: bycatch
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(bycatch)
> hauls = with(bycatch,rep(no.albatross,no.hauls))
> 
> 
> 
> cleanEx()
> nameEx("cabinet")
> ### * cabinet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cabinet
> ### Title: Estimated tax savings for US President Bush's cabinet
> ### Aliases: cabinet
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(cabinet)
> attach(cabinet)
> median(est.dividend.cg)
[1] 36002
> mean(est.dividend.cg)
[1] 538818.2
> detach(cabinet)
> 
> 
> 
> cleanEx()
> nameEx("camp")
> ### * camp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: camp
> ### Title: Mount Campito Yearly Treering Data, -3435-1969.
> ### Aliases: camp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(camp)
> acf(camp)
> 
> 
> 
> cleanEx()
> nameEx("cancer")
> ### * cancer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cancer
> ### Title: cancer survival times
> ### Aliases: cancer
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(cancer)
> boxplot(cancer)
> 
> 
> 
> cleanEx()
> nameEx("carbon")
> ### * carbon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: carbon
> ### Title: Carbon Monoxide levels at different sites
> ### Aliases: carbon
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(carbon)
> boxplot(Monoxide ~ Site,data=carbon)
> 
> 
> 
> cleanEx()
> nameEx("carsafety")
> ### * carsafety
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: carsafety
> ### Title: Fatality information in U.S. for several popular cars
> ### Aliases: carsafety
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(carsafety)
> plot(Driver.deaths + Other.deaths ~ type, data = carsafety)
> plot(Driver.deaths + Other.deaths ~ type, data = carsafety)
> 
> 
> 
> cleanEx()
> nameEx("central.park")
> ### * central.park
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: central.park
> ### Title: Weather in Central Park NY in May 2003
> ### Aliases: central.park
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(central.park)
> attach(central.park)
> barplot(rbind(MIN,MAX-MIN),ylim=c(0,80))
> 
> 
> 
> cleanEx()

detaching 'central.park'

> nameEx("central.park.cloud")
> ### * central.park.cloud
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: central.park.cloud
> ### Title: Type of day in Central Park, NY May 2003
> ### Aliases: central.park.cloud
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(central.park.cloud)
> table(central.park.cloud)
central.park.cloud
        clear partly.cloudy        cloudy 
           11            11             9 
> 
> 
> 
> cleanEx()
> nameEx("ceo2013")
> ### * ceo2013
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ceo2013
> ### Title: CEO compensation in 2013
> ### Aliases: ceo2013
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(ceo2013)
> 
> 
> 
> cleanEx()
> nameEx("cfb")
> ### * cfb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cfb
> ### Title: Bootstrap sample from the Survey of Consumer Finances
> ### Aliases: cfb
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(cfb)
> attach(cfb)
> mean(INCOME)
[1] 63402.66
> 
> 
> 
> cleanEx()

detaching 'cfb'

> nameEx("chicken")
> ### * chicken
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chicken
> ### Title: weight gain of chickens fed 3 different rations
> ### Aliases: chicken
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(chicken)
> boxplot(chicken)
> 
> 
> 
> cleanEx()
> nameEx("chips")
> ### * chips
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chips
> ### Title: Measurements of chip wafers
> ### Aliases: chips
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(chips)
> boxplot(chips)
> 
> 
> 
> cleanEx()
> nameEx("co2emiss")
> ### * co2emiss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: co2emiss
> ### Title: Carbon Dioxide Emissions from the U.S.A. from fossil fuel
> ### Aliases: co2emiss
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(co2emiss)
> monthplot(co2emiss)
> stl(co2emiss, s.window="periodic")
 Call:
 stl(x = co2emiss, s.window = "periodic")

Components
            seasonal     trend    remainder
Jan 1981 -1.04986268 -29.53207  0.115076152
Feb 1981 -1.03529666 -29.56656  0.239599799
Mar 1981 -0.67277925 -29.60104 -0.050981389
Apr 1981 -0.25336875 -29.63109  0.108515798
May 1981  0.32968052 -29.66115 -0.260363720
Jun 1981  0.67586154 -29.68776 -0.155221601
Jul 1981  0.77810203 -29.71436 -0.020958753
Aug 1981  0.76145509 -29.73812 -0.054592854
Sep 1981  0.68312623 -29.76188 -0.027299211
Oct 1981  0.42928661 -29.75973 -0.292145975
Nov 1981 -0.08716699 -29.75759 -0.063308112
Dec 1981 -0.55903772 -29.72901 -0.106974588
Jan 1982 -1.04986268 -29.70042 -0.120895657
Feb 1982 -1.03529666 -29.67414  0.088780422
Mar 1982 -0.67277925 -29.64786  0.026124677
Apr 1982 -0.25336875 -29.63067  0.152850100
May 1982  0.32968052 -29.61349  0.322112118
Jun 1982  0.67586154 -29.60997  0.019498196
Jul 1982  0.77810203 -29.60646  0.069177364
Aug 1982  0.76145509 -29.61526  0.080965588
Sep 1982  0.68312623 -29.62407 -0.026662146
Oct 1982  0.42928661 -29.63527 -0.192455597
Nov 1982 -0.08716699 -29.64646 -0.178047202
Dec 1982 -0.55903772 -29.63915  0.133000511
Jan 1983 -1.04986268 -29.63183 -0.274340849
Feb 1983 -1.03529666 -29.59719 -0.082572253
Mar 1983 -0.67277925 -29.56254  0.023269529
Apr 1983 -0.25336875 -29.50909 -0.164049678
May 1983  0.32968052 -29.45564 -0.124674979
Jun 1983  0.67586154 -29.40621  0.017529268
Jul 1983  0.77810203 -29.35678  0.171632285
Aug 1983  0.76145509 -29.32869  0.180209537
Sep 1983  0.68312623 -29.30059  0.106863851
Oct 1983  0.42928661 -29.29861  0.136456691
Nov 1983 -0.08716699 -29.29663  0.237617967
Dec 1983 -0.55903772 -29.31037  0.387674444
Jan 1984 -1.04986268 -29.32412 -0.275121112
Feb 1984 -1.03529666 -29.34182 -0.145812013
Mar 1984 -0.67277925 -29.35952 -0.032047459
Apr 1984 -0.25336875 -29.36878 -0.255615553
May 1984  0.32968052 -29.37804 -0.222022643
Jun 1984  0.67586154 -29.37651 -0.039655484
Jul 1984  0.77810203 -29.37497  0.016452804
Aug 1984  0.76145509 -29.36355  0.126734159
Sep 1984  0.68312623 -29.35212  0.042318277
Oct 1984  0.42928661 -29.33420  0.123033240
Nov 1984 -0.08716699 -29.31628  0.131052170
Dec 1984 -0.55903772 -29.29950  0.015450265
Jan 1985 -1.04986268 -29.28272  0.065772877
Feb 1985 -1.03529666 -29.27312 -0.479750594
Mar 1985 -0.67277925 -29.26352 -0.003866549
Apr 1985 -0.25336875 -29.25365  0.001143877
May 1985  0.32968052 -29.24378  0.196404948
Jun 1985  0.67586154 -29.23221  0.014819918
Jul 1985  0.77810203 -29.22064 -0.004546261
Aug 1985  0.76145509 -29.20935  0.021468146
Sep 1985  0.68312623 -29.19806  0.022274176
Oct 1985  0.42928661 -29.19083  0.063097402
Nov 1985 -0.08716699 -29.18360  0.141980935
Dec 1985 -0.55903772 -29.17178 -0.154890994
Jan 1986 -1.04986268 -29.15995 -0.129570435
Feb 1986 -1.03529666 -29.13848 -0.107857775
Mar 1986 -0.67277925 -29.11701 -0.073081028
Apr 1986 -0.25336875 -29.08982  0.028798433
May 1986  0.32968052 -29.06263 -0.061436619
Jun 1986  0.67586154 -29.04134  0.006532080
Jul 1986  0.77810203 -29.02005  0.127889550
Aug 1986  0.76145509 -29.01654  0.103871769
Sep 1986  0.68312623 -29.01303  0.117441921
Oct 1986  0.42928661 -29.02220  0.211212415
Nov 1986 -0.08716699 -29.03138  0.175898736
Dec 1986 -0.55903772 -29.04183  0.057730524
Jan 1987 -1.04986268 -29.05229 -0.213736689
Feb 1987 -1.03529666 -29.06439 -0.261480140
Mar 1987 -0.67277925 -29.07649 -0.189079865
Apr 1987 -0.25336875 -29.08757 -0.060096526
May 1987  0.32968052 -29.09864  0.040523349
Jun 1987  0.67586154 -29.09952  0.052512099
Jul 1987  0.77810203 -29.10040  0.177578580
Aug 1987  0.76145509 -29.09527  0.073126483
Sep 1987  0.68312623 -29.09015  0.071116390
Oct 1987  0.42928661 -29.09560 -0.059079837
Nov 1987 -0.08716699 -29.10105 -0.047137078
Dec 1987 -0.55903772 -29.11358  0.025823161
Jan 1988 -1.04986268 -29.12611 -0.007436973
Feb 1988 -1.03529666 -29.13292 -0.013855179
Mar 1988 -0.67277925 -29.13972 -0.054485599
Apr 1988 -0.25336875 -29.13621  0.014738465
May 1988  0.32968052 -29.13270 -0.174915185
Jun 1988  0.67586154 -29.12207 -0.017974844
Jul 1988  0.77810203 -29.11144  0.015022487
Aug 1988  0.76145509 -29.10353  0.029850907
Sep 1988  0.68312623 -29.09562  0.014734551
Oct 1988  0.42928661 -29.09839  0.025289329
Nov 1988 -0.08716699 -29.10116  0.057620194
Dec 1988 -0.55903772 -29.11283  0.159072171
Jan 1989 -1.04986268 -29.12450  0.190213676
Feb 1989 -1.03529666 -29.14165  0.024683931
Mar 1989 -0.67277925 -29.15881 -0.076674127
Apr 1989 -0.25336875 -29.18025 -0.132587014
May 1989  0.32968052 -29.20168 -0.137302806
Jun 1989  0.67586154 -29.21943 -0.005093184
Jul 1989  0.77810203 -29.23718 -0.027899151
Aug 1989  0.76145509 -29.23823  0.055231942
Sep 1989  0.68312623 -29.23929 -0.027041281
Oct 1989  0.42928661 -29.23405 -0.072275005
Nov 1989 -0.08716699 -29.22881 -0.035921183
Dec 1989 -0.55903772 -29.23002 -0.106506513
Jan 1990 -1.04986268 -29.23124  0.091396624
Feb 1990 -1.03529666 -29.23565  0.229795194
Mar 1990 -0.67277925 -29.24006  0.158315449
Apr 1990 -0.25336875 -29.24521 -0.055276714
May 1990  0.32968052 -29.25036 -0.106936992
Jun 1990  0.67586154 -29.26030 -0.090210196
Jul 1990  0.77810203 -29.27025 -0.005482050
Aug 1990  0.76145509 -29.28178  0.054558949
Sep 1990  0.68312623 -29.29331 -0.053976309
Oct 1990  0.42928661 -29.29735 -0.040001651
Nov 1990 -0.08716699 -29.30140  0.029164372
Dec 1990 -0.55903772 -29.30031 -0.015488240
Jan 1991 -1.04986268 -29.29922 -0.015439434
Feb 1991 -1.03529666 -29.30105  0.048547454
Mar 1991 -0.67277925 -29.30287  0.004546308
Apr 1991 -0.25336875 -29.30943 -0.031532761
May 1991  0.32968052 -29.31599  0.017495286
Jun 1991  0.67586154 -29.32289  0.091727102
Jul 1991  0.77810203 -29.32979 -0.009194921
Aug 1991  0.76145509 -29.33466  0.049067567
Sep 1991  0.68312623 -29.33953 -0.004752633
Oct 1991  0.42928661 -29.34728 -0.125199236
Nov 1991 -0.08716699 -29.35503 -0.137915382
Dec 1991 -0.55903772 -29.36329  0.071190650
Jan 1992 -1.04986268 -29.37154  0.073565910
Feb 1992 -1.03529666 -29.37281  0.056657956
Mar 1992 -0.67277925 -29.37408  0.069240957
Apr 1992 -0.25336875 -29.37352 -0.098617250
May 1992  0.32968052 -29.37297 -0.091082841
Jun 1992  0.67586154 -29.37947 -0.042207640
Jul 1992  0.77810203 -29.38597  0.043974513
Aug 1992  0.76145509 -29.39515  0.084569930
Sep 1992  0.68312623 -29.40432  0.061308041
Oct 1992  0.42928661 -29.40554  0.078063756
Nov 1992 -0.08716699 -29.40675 -0.081605542
Dec 1992 -0.55903772 -29.40337 -0.090796472
Jan 1993 -1.04986268 -29.40000 -0.029477204
Feb 1993 -1.03529666 -29.39811 -0.057735004
Mar 1993 -0.67277925 -29.39621 -0.106422638
Apr 1993 -0.25336875 -29.39660 -0.032476022
May 1993  0.32968052 -29.39699  0.189253890
Jun 1993  0.67586154 -29.39965  0.045466052
Jul 1993  0.77810203 -29.40232  0.097243574
Aug 1993  0.76145509 -29.41001  0.069262211
Sep 1993  0.68312623 -29.41770  0.076443351
Oct 1993  0.42928661 -29.42691 -0.104978583
Nov 1993 -0.08716699 -29.43612 -0.083299700
Dec 1993 -0.55903772 -29.44617  0.026446050
Jan 1994 -1.04986268 -29.45621 -0.086286312
Feb 1994 -1.03529666 -29.46476 -0.157635490
Mar 1994 -0.67277925 -29.47330 -0.002539043
Apr 1994 -0.25336875 -29.48036  0.117106808
May 1994  0.32968052 -29.48743  0.114242504
Jun 1994  0.67586154 -29.49334  0.038723557
Jul 1994  0.77810203 -29.49926  0.032436100
Aug 1994  0.76145509 -29.50929  0.025711248
Sep 1994  0.68312623 -29.51932 -0.062470050
Oct 1994  0.42928661 -29.53845 -0.014381097
Nov 1994 -0.08716699 -29.55758 -0.077161446
Dec 1994 -0.55903772 -29.57580  0.054364352
Jan 1995 -1.04986268 -29.59403  0.021207867
Feb 1995 -1.03529666 -29.60364  0.052735773
Mar 1995 -0.67277925 -29.61325 -0.016797377
Apr 1995 -0.25336875 -29.62002 -0.104510440
May 1995  0.32968052 -29.62680 -0.120986158
Jun 1995  0.67586154 -29.63367  0.068557791
Jul 1995  0.77810203 -29.64055 -0.021035540
Aug 1995  0.76145509 -29.64126  0.035523273
Sep 1995  0.68312623 -29.64198  0.050342550
Oct 1995  0.42928661 -29.63724  0.082208202
Nov 1995 -0.08716699 -29.63251 -0.141799960
Dec 1995 -0.55903772 -29.62635 -0.136816681
Jan 1996 -1.04986268 -29.62019  0.029871505
Feb 1996 -1.03529666 -29.61099  0.098187522
Mar 1996 -0.67277925 -29.60180 -0.011969075
Apr 1996 -0.25336875 -29.58973 -0.068077068
May 1996  0.32968052 -29.57766 -0.021278825
Jun 1996  0.67586154 -29.56577 -0.029769578
Jul 1996  0.77810203 -29.55388  0.077888309
Aug 1996  0.76145509 -29.54532  0.071057715
Sep 1996  0.68312623 -29.53675 -0.024405166
Oct 1996  0.42928661 -29.53110  0.094778884
Nov 1996 -0.08716699 -29.52544 -0.078686709
Dec 1996 -0.55903772 -29.52649 -0.066733649
Jan 1997 -1.04986268 -29.52754  0.119402749
Feb 1997 -1.03529666 -29.53109 -0.001996490
Mar 1997 -0.67277925 -29.53464  0.022614327
Apr 1997 -0.25336875 -29.53538  0.036238904
May 1997  0.32968052 -29.53611 -0.065407193
Jun 1997  0.67586154 -29.53378 -0.046204388
Jul 1997  0.77810203 -29.53145 -0.029998372
Aug 1997  0.76145509 -29.52383 -0.064802926
Sep 1997  0.68312623 -29.51621 -0.015581357
Oct 1997  0.42928661 -29.50194  0.125393879
Nov 1997 -0.08716699 -29.48767 -0.132992498
Dec 1997 -0.55903772 -29.47740 -0.100815391
Jan 1998 -1.04986268 -29.46712  0.093493124
Feb 1998 -1.03529666 -29.46517  0.123460506
Mar 1998 -0.67277925 -29.46322 -0.005672387
Apr 1998 -0.25336875 -29.46212  0.155123339
May 1998  0.32968052 -29.46102  0.095753101
Jun 1998  0.67586154 -29.45853 -0.039506701
Jul 1998  0.77810203 -29.45605 -0.144063333
Aug 1998  0.76145509 -29.45577 -0.153413159
Sep 1998  0.68312623 -29.45548 -0.097826932
Oct 1998  0.42928661 -29.45168  0.086617158
Nov 1998 -0.08716699 -29.44788  0.003736684
Dec 1998 -0.55903772 -29.43912  0.050295934
Jan 1999 -1.04986268 -29.43036 -0.037087919
Feb 1999 -1.03529666 -29.42488  0.139444007
Mar 1999 -0.67277925 -29.41940 -0.031332022
Apr 1999 -0.25336875 -29.42023  0.024810123
May 1999  0.32968052 -29.42107  0.070413924
Jun 1999  0.67586154 -29.42022  0.027381435
Jul 1999  0.77810203 -29.41937 -0.026283414
Aug 1999  0.76145509 -29.41382 -0.130853080
Sep 1999  0.68312623 -29.40827 -0.100532433
Oct 1999  0.42928661 -29.40357 -0.079195615
Nov 1999 -0.08716699 -29.39887  0.064148450
Dec 1999 -0.55903772 -29.39768  0.024695052
Jan 2000 -1.04986268 -29.39650  0.060014852
Feb 2000 -1.03529666 -29.39669  0.079314280
Mar 2000 -0.67277925 -29.39688  0.194172754
Apr 2000 -0.25336875 -29.40187  0.001035148
May 2000  0.32968052 -29.40687 -0.060276393
Jun 2000  0.67586154 -29.41771 -0.039288162
Jul 2000  0.77810203 -29.42854 -0.051163751
Aug 2000  0.76145509 -29.43235 -0.138432212
Sep 2000  0.68312623 -29.43615  0.010479161
Oct 2000  0.42928661 -29.42586  0.100459206
Nov 2000 -0.08716699 -29.41556 -0.074079743
Dec 2000 -0.55903772 -29.40111 -0.318066432
Jan 2001 -1.04986268 -29.38665  0.088761166
Feb 2001 -1.03529666 -29.38149  0.116655545
Mar 2001 -0.67277925 -29.37632  0.071082060
Apr 2001 -0.25336875 -29.37380  0.108490413
May 2001  0.32968052 -29.37129  0.199101242
Jun 2001  0.67586154 -29.36436  0.058699582
Jul 2001  0.77810203 -29.35743 -0.106433337
Aug 2001  0.76145509 -29.35786 -0.165946207
Sep 2001  0.68312623 -29.35829 -0.155311604
Oct 2001  0.42928661 -29.36456 -0.168011047
Nov 2001 -0.08716699 -29.37083  0.155601697
Dec 2001 -0.55903772 -29.37981  0.120852027
Jan 2002 -1.04986268 -29.38880  0.150906033
Feb 2002 -1.03529666 -29.39793  0.086013793
Mar 2002 -0.67277925 -29.40706 -0.012216371
Apr 2002 -0.25336875 -29.41780  0.037033113
May 2002  0.32968052 -29.42855  0.086981473
Jun 2002  0.67586154 -29.43744 -0.100405436
Jul 2002  0.77810203 -29.44633 -0.245426634
Aug 2002  0.76145509 -29.44211 -0.201469067
Sep 2002  0.68312623 -29.43789 -0.028362947
Oct 2002  0.42928661 -29.41407  0.015025854
Nov 2002 -0.08716699 -29.39025  0.005240512
Dec 2002 -0.55903772 -29.35712 -0.057137822
Jan 2003 -1.04986268 -29.32400  0.068053531
Feb 2003 -1.03529666 -29.29503 -0.093466463
Mar 2003 -0.67277925 -29.26606  0.082884318
Apr 2003 -0.25336875 -29.24762  0.200659929
May 2003  0.32968052 -29.22919  0.096726095
Jun 2003  0.67586154 -29.20942  0.140287751
Jul 2003  0.77810203 -29.18965 -0.166738423
Aug 2003  0.76145509 -29.17184 -0.187096272
Sep 2003  0.68312623 -29.15403  0.010037131
Oct 2003  0.42928661 -29.13780 -0.034182931
Nov 2003 -0.08716699 -29.12157  0.090217544
Dec 2003 -0.55903772 -29.10586 -0.008678193
> 
> 
> 
> cleanEx()
> nameEx("coins")
> ### * coins
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coins
> ### Title: The coins in my change bin
> ### Aliases: coins
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(coins)
> years = cut(coins$year,seq(1920,2010,by=10),include.lowest=TRUE,
+   labels = paste(192:200,"*",sep=""))
> table(years)
years
192* 193* 194* 195* 196* 197* 198* 199* 200* 
   3    2    0    3   16   43   99  147   58 
> 
> 
> 
> cleanEx()
> nameEx("coldvermont")
> ### * coldvermont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coldvermont
> ### Title: Daily minimum temperature in Woodstock Vermont
> ### Aliases: coldvermont
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(coldvermont)
> plot(coldvermont)
> 
> 
> 
> cleanEx()
> nameEx("confint.htest")
> ### * confint.htest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confint.htest
> ### Title: Produce confidence interval for objects of class 'htest'
> ### Aliases: confint.htest
> ### Keywords: utilities
> 
> ### ** Examples
> 
> confint(t.test(rnorm(10)))	
(-0.43, 0.69) with 95 percent confidence> 
> 
> 
> cleanEx()
> nameEx("corn")
> ### * corn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corn
> ### Title: Comparison of corn for new and standard variety
> ### Aliases: corn
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(corn)
> t.test(corn)

	One Sample t-test

data:  corn
t = 43.12, df = 23, p-value < 2.2e-16
alternative hypothesis: true mean is not equal to 0
95 percent confidence interval:
  92.3068 101.6099
sample estimates:
mean of x 
 96.95833 

> 
> 
> 
> cleanEx()
> nameEx("crime")
> ### * crime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: crime
> ### Title: violent crime rates in 50 states of US
> ### Aliases: crime
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(crime)
> boxplot(crime)
> t.test(crime[,1],crime[,2],paired=TRUE)

	Paired t-test

data:  crime[, 1] and crime[, 2]
t = -7.6839, df = 50, p-value = 5.141e-10
alternative hypothesis: true mean difference is not equal to 0
95 percent confidence interval:
 -213.5671 -125.0525
sample estimates:
mean difference 
      -169.3098 

> 
> 
> 
> cleanEx()
> nameEx("deflection")
> ### * deflection
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deflection
> ### Title: Deflection under load
> ### Aliases: deflection
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(deflection)
> res = lm(Deflection ~ Load, data = deflection)
> plot(Deflection ~ Load, data = deflection)
> abline(res)			# looks good?
> plot(res)
> 
> 
> 
> cleanEx()
> nameEx("demos")
> ### * demos
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: demos
> ### Title: Provide menu for possible shiny demonstrations
> ### Aliases: demos
> ### Keywords: dynamic
> 
> ### ** Examples
> 
> ## demos()
> 
> 
> 
> cleanEx()
> nameEx("diamond")
> ### * diamond
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diamond
> ### Title: Price by size for diamond rings
> ### Aliases: diamond
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(diamond)
> plot(price ~ carat, diamond, pch=5)
> 
> 
> 
> cleanEx()
> nameEx("divorce")
> ### * divorce
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: divorce
> ### Title: Time until divorce for divorced women (by age)
> ### Aliases: divorce
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(divorce)
> apply(divorce[,2:6],2,sum)	# percent divorced by age of marriage
all ages     0-17    18-19    20-24   25-100 
    0.50     0.67     0.56     0.41     0.43 
> 
> 
> 
> cleanEx()
> nameEx("dottodot")
> ### * dottodot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dottodot
> ### Title: Dot-to-dot puzzle
> ### Aliases: dottodot
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(dottodot)
> # make a blank graph
> plot(y~x,data=dottodot,type="n",bty="n",xaxt="n",xlab="",yaxt="n",ylab="")
> # add the points
> points(y~x,data=dottodot)
> # add the labels using pos argument
> with(dottodot, text(x,y,labels=ind,pos=pos))
> # solve the puzzle
> lines(y~x, data=dottodot)
> 
> 
> 
> cleanEx()
> nameEx("dowdata")
> ### * dowdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dowdata
> ### Title: The Dow Jones average from Jan 1999 to October 2000
> ### Aliases: dowdata
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(dowdata)
> the.close <- dowdata$Close
> n <- length(the.close)
> plot(log(the.close[2:n]/the.close[1:(n-1)]))
> 
> 
> 
> cleanEx()
> nameEx("dvdsales")
> ### * dvdsales
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dvdsales
> ### Title: Monthly DVD player sales since introduction to May 2004
> ### Aliases: dvdsales
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(dvdsales)
> barplot(t(dvdsales[7:1,]),beside=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("emissions")
> ### * emissions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: emissions
> ### Title: CO2 emissions data and gross domestic product for 26 countries
> ### Aliases: emissions
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(emissions)
> plot(emissions)
> 
> 
> 
> cleanEx()
> nameEx("ewr")
> ### * ewr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ewr
> ### Title: Taxi in and taxi out times at EWR (Newark) airport for 1999-2001
> ### Aliases: ewr
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(ewr)
> boxplot(ewr[3:10])
> 
> 
> 
> cleanEx()
> nameEx("exec.pay")
> ### * exec.pay
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: exec.pay
> ### Title: Direct compensation for 199 United States CEOs in the year 2000
> ### Aliases: exec.pay
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(exec.pay)
> hist(exec.pay)
> 
> 
> 
> cleanEx()
> nameEx("fat")
> ### * fat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fat
> ### Title: Body measurements to predict percentage of body fat in males
> ### Aliases: fat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(fat)
> f = body.fat ~ age + weight + height + BMI + neck + chest + abdomen +
+ hip + thigh + knee + ankle + bicep + forearm + wrist
> res = lm(f, data=fat)
> summary(res)

Call:
lm(formula = f, data = fat)

Residuals:
     Min       1Q   Median       3Q      Max 
-10.2573  -2.5919  -0.1031   2.9040   9.2754 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) -1.519e+01  1.611e+01  -0.943   0.3467    
age          5.688e-02  3.003e-02   1.894   0.0594 .  
weight      -8.130e-02  4.989e-02  -1.630   0.1045    
height      -5.307e-02  1.034e-01  -0.513   0.6084    
BMI          6.101e-02  2.780e-01   0.219   0.8265    
neck        -4.450e-01  2.184e-01  -2.037   0.0427 *  
chest       -3.087e-02  9.779e-02  -0.316   0.7526    
abdomen      8.790e-01  8.545e-02  10.286   <2e-16 ***
hip         -2.031e-01  1.371e-01  -1.481   0.1398    
thigh        2.274e-01  1.356e-01   1.677   0.0948 .  
knee        -9.927e-04  2.298e-01  -0.004   0.9966    
ankle        1.572e-01  2.076e-01   0.757   0.4496    
bicep        1.485e-01  1.600e-01   0.928   0.3543    
forearm      4.297e-01  1.849e-01   2.324   0.0210 *  
wrist       -1.479e+00  4.967e-01  -2.978   0.0032 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 3.996 on 237 degrees of freedom
Multiple R-squared:  0.749,	Adjusted R-squared:  0.7342 
F-statistic: 50.52 on 14 and 237 DF,  p-value: < 2.2e-16

> 
> 
> 
> cleanEx()
> nameEx("father.son")
> ### * father.son
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: father.son
> ### Title: Pearson's data set on heights of fathers and their sons
> ### Aliases: father.son
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(father.son)
> ## like cover of Freedman, Pisani, and Purves
> plot(sheight ~ fheight, data=father.son,bty="l",pch=20)
> abline(a=0,b=1,lty=2,lwd=2)
> abline(lm(sheight ~ fheight, data=father.son),lty=1,lwd=2)
> 
> 
> 
> cleanEx()
> nameEx("female.inc")
> ### * female.inc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: female.inc
> ### Title: Income distribution for females in 2001
> ### Aliases: female.inc
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(female.inc)
> boxplot(income ~ race, female.inc)
> boxplot(log(income,10) ~ race, female.inc)
> sapply(with(female.inc,split(income,race)),median)
   black hispanic    white 
   13619     6214    13619 
> 
> 
> 
> cleanEx()
> nameEx("firstchi")
> ### * firstchi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: firstchi
> ### Title: Age of mother at birth of first child
> ### Aliases: firstchi
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(firstchi)
> hist(firstchi)
> 
> 
> 
> cleanEx()
> nameEx("five.yr.temperature")
> ### * five.yr.temperature
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: five.yr.temperature
> ### Title: Five years of weather in New York City
> ### Aliases: five.yr.temperature
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(five.yr.temperature)
> attach(five.yr.temperature)
> scatter.smooth(temps ~ days,col=gray(.75))
> lines(smooth.spline(temps ~ days), lty=2)
> lines(supsmu(days, temps), lty=3)
> 
> 
> 
> cleanEx()

detaching 'five.yr.temperature'

> nameEx("florida")
> ### * florida
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: florida
> ### Title: County-by-county results of year 2000 US presidential election
> ###   in Florida
> ### Aliases: florida
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(florida)
> attach(florida)
> result.lm <- lm(BUCHANAN ~ BUSH)
> plot(BUSH,BUCHANAN)
> abline(result.lm) ## can you find Palm Beach and Miami Dade counties?
> 
> 
> 
> cleanEx()

detaching 'florida'

> nameEx("galileo")
> ### * galileo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: galileo
> ### Title: Galileo data on falling bodies
> ### Aliases: galileo
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(galileo)
> polynomial = function(x,coefs) {
+   sum = 0
+   for(i in 0:(length(coefs)-1)) {
+     sum = sum + coefs[i+1]*x^i
+   }
+   sum
+ }
> res.lm = lm(h.d ~ init.h, data = galileo)
> res.lm2 = update(res.lm, . ~ . + I(init.h^2), data=galileo)
> res.lm3 = update(res.lm2, . ~ . + I(init.h^3), data=galileo)
> plot(h.d ~ init.h, data = galileo)
> curve(polynomial(x,coef(res.lm)),add=TRUE)
> curve(polynomial(x,coef(res.lm2)),add=TRUE)
> curve(polynomial(x,coef(res.lm3)),add=TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("galton")
> ### * galton
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: galton
> ### Title: Galton's height data for parents and children
> ### Aliases: galton
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(galton)
> plot(galton)
> ## or with some jitter.
> plot(jitter(child,5) ~ jitter(parent,5),galton)
> ## sunflowerplot shows flowers for multiple plots (Thanks MM)
> sunflowerplot(galton)
> 
> 
> 
> cleanEx()
> nameEx("gap")
> ### * gap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gap
> ### Title: Sales data for the Gap
> ### Aliases: gap
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(gap)
> monthplot(gap)
> 
> 
> 
> cleanEx()
> nameEx("gasprices")
> ### * gasprices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gasprices
> ### Title: Monthly average gasoline prices in the United States
> ### Aliases: gasprices
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(gasprices)
> plot(gasprices)
> 
> 
> 
> cleanEx()
> nameEx("goalspergame")
> ### * goalspergame
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: goalspergame
> ### Title: Goals per game in NHL
> ### Aliases: goalspergame
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(goalspergame)
> 
> 
> 
> cleanEx()
> nameEx("google")
> ### * google
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: google
> ### Title: Google stock values during 2005-02-07 to 2005-07-07
> ### Aliases: google
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(google)
> plot(google,type="l")
> 
> 
> 
> cleanEx()
> nameEx("grades")
> ### * grades
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grades
> ### Title: Current and previous grades
> ### Aliases: grades
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(grades)
> table(grades)
      grade
prev    A    A-   B+   B    B-   C+   C    D    F  
   A     15    3    1    4    0    0    3    2    0
   A-     3    1    1    0    0    0    0    0    0
   B+     0    2    2    1    2    0    0    1    1
   B      0    1    1    4    3    1    3    0    2
   B-     0    1    0    2    0    0    1    0    0
   C+     1    1    0    0    0    0    1    0    0
   C      1    0    0    1    1    3    5    9    7
   D      0    0    0    1    0    0    4    3    1
   F      1    0    0    1    1    1    3    4   11
> 
> 
> 
> cleanEx()
> nameEx("grip")
> ### * grip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grip
> ### Title: Effects of cross-country ski-pole grip
> ### Aliases: grip
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(grip)
> ftable(xtabs(UBP ~ person + replicate + grip.type,grip))
                 grip.type  classic integrated   modern
person replicate                                       
1      1                   168.2084   166.7134 160.0739
       2                   161.4141   173.0319 161.2383
       3                   163.2345   173.2537 166.7635
2      1                   155.9429   165.4825 161.8334
       2                   168.5388   166.0498 162.7900
       3                   166.3163   170.5794 157.5793
3      1                   162.6191   174.8182 165.2248
       2                   157.8030   166.8222 162.7804
       3                   171.6529   165.2776 159.7632
4      1                   165.1400   174.8661 160.3049
       2                   164.9525   173.0058 168.5381
       3                   158.2008   165.1532 164.4688
> 
> 
> 
> cleanEx()
> nameEx("hall.fame")
> ### * hall.fame
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hall.fame
> ### Title: Data frame containing baseball statistics including Hall of Fame
> ###   membership
> ### Aliases: hall.fame
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(hall.fame)
> hist(hall.fame$OBP)
> with(hall.fame,last[Hall.Fame.Membership != "not a member"])
  [1] "AARON"        "ANSON"        "APARICIO"     "APPLING"      "ASHBURN"     
  [6] "AVERILL"      "BAKER"        "BANCROFT"     "BANKS"        "BECKLEY"     
 [11] "BENCH"        "BERRA"        "BOTTOMLEY"    "BOUDREAU"     "BRESNAHAN"   
 [16] "BROCK"        "BROUTHERS"    "BURKETT"      "CAMPANELLA"   "CAREW"       
 [21] "CAREY"        "CEPEDA"       "CHANCE"       "CLARKE"       "CLEMENTE"    
 [26] "COBB"         "COCHRANE"     "COLLINS"      "COLLINS"      "COMBS"       
 [31] "CONNOR"       "CRAWFORD"     "CRONIN"       "CUYLER"       "DAVIS"       
 [36] "DELAHANTY"    "DICKEY"       "DiMAGGIO"     "DOBY"         "DOERR"       
 [41] "DUFFY"        "EVERS"        "EWING"        "FERRELL"      "FLICK"       
 [46] "FOX"          "FOXX"         "FRISCH"       "GEHRIG"       "GEHRINGER"   
 [51] "GOSLIN"       "GREENBERG"    "HAFEY"        "HAMILTON"     "HARTNETT"    
 [56] "HEILMANN"     "HERMAN"       "HOOPER"       "HORNSBY"      "JACKSON"     
 [61] "JACKSON"      "JENNINGS"     "KALINE"       "KEELER"       "KELL"        
 [66] "KELLEY"       "KELLY"        "KELLY"        "KILLEBREW"    "KINER"       
 [71] "KLEIN"        "LAJOIE"       "LAZZERI"      "LINDSTROM"    "LOMBARDI"    
 [76] "MANTLE"       "MANUSH"       "MARANVILLE"   "MATHEWS"      "MAYS"        
 [81] "McCARTHY"     "McCOVEY"      "McPHEE"       "MEDWICK"      "MIZE"        
 [86] "MORGAN"       "MUSIAL"       "O'ROURKE"     "OTT"          "PEREZ"       
 [91] "REESE"        "RICE"         "RIZZUTO"      "ROBINSON"     "ROBINSON"    
 [96] "ROBINSON"     "ROUSH"        "RUTH"         "SCHALK"       "SCHMIDT"     
[101] "SCHOENDIENST" "SEWELL"       "SIMMONS"      "SISLER"       "SLAUGHTER"   
[106] "SNIDER"       "SPEAKER"      "STARGELL"     "TERRY"        "THOMPSON"    
[111] "TINKER"       "TRAYNOR"      "VAUGHAN"      "WAGNER"       "WALLACE"     
[116] "WANER"        "WANER"        "WARD"         "WHEAT"        "WILLIAMS"    
[121] "WILLIAMS"     "WILSON"       "YASTRZEMSKI"  "YOUNGS"      
> 
> 
> 
> cleanEx()
> nameEx("headtail")
> ### * headtail
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: headtail
> ### Title: Show head and tail
> ### Aliases: headtail
> ### Keywords: utilities
> 
> ### ** Examples
> 
> headtail(mtcars)
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
   ...
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 
> 
> 
> 
> cleanEx()
> nameEx("healthy")
> ### * healthy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: healthy
> ### Title: Healthy or not?
> ### Aliases: healthy
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(healthy)
> library(MASS)
> stepAIC(glm(healthy ~ p + g, healthy, family=binomial))
Start:  AIC=28.97
healthy ~ p + g

       Df Deviance    AIC
- g     1   24.840 28.840
<none>      22.971 28.971
- p     1   28.945 32.945

Step:  AIC=28.84
healthy ~ p

       Df Deviance    AIC
<none>      24.840 28.840
- p     1   30.885 32.885

Call:  glm(formula = healthy ~ p, family = binomial, data = healthy)

Coefficients:
(Intercept)            p  
     -6.845        1.827  

Degrees of Freedom: 31 Total (i.e. Null);  30 Residual
Null Deviance:	    30.88 
Residual Deviance: 24.84 	AIC: 28.84
> 
> 
> 
> cleanEx()
> nameEx("heartrate")
> ### * heartrate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: heartrate
> ### Title: Simulated data of age vs. max heart rate
> ### Aliases: heartrate
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(heartrate)
> plot(heartrate)
> abline(lm(maxrate ~ age,data=heartrate))
> 
> 
> 
> cleanEx()
> nameEx("home")
> ### * home
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: home
> ### Title: Maplewood NJ homedata
> ### Aliases: home
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(home)
> ## compare on the same scale
> boxplot(data.frame(scale(home))) 
> 
> 
> 
> cleanEx()
> nameEx("homedata")
> ### * homedata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: homedata
> ### Title: Maplewood NJ assessed values for years 1970 and 2000
> ### Aliases: homedata
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(homedata)
> plot(homedata)
> 
> 
> 
> cleanEx()
> nameEx("homeprice")
> ### * homeprice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: homeprice
> ### Title: Sale price of homes in New Jersey in the year 2001
> ### Aliases: homeprice
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(homeprice)
> plot(homeprice$sale,homeprice$list)
> abline(lm(homeprice$list~homeprice$sale))
> 
> 
> 
> cleanEx()
> nameEx("homework")
> ### * homework
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: homework
> ### Title: Homework averages for Private and Public schools
> ### Aliases: homework
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(homework)
> boxplot(homework)
> 
> 
> 
> cleanEx()
> nameEx("income_percentiles")
> ### * income_percentiles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: income_percentiles
> ### Title: Top percentiles of U.S. income
> ### Aliases: income_percentiles
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(income_percentiles)
> 
> 
> 
> cleanEx()
> nameEx("iq")
> ### * iq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iq
> ### Title: IQ scores
> ### Aliases: iq
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(iq)
> qqnorm(iq)
> 
> 
> 
> cleanEx()
> nameEx("kid.weights")
> ### * kid.weights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kid.weights
> ### Title: Weight and height measurement for a sample of U.S. children
> ### Aliases: kid.weights
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(kid.weights)
> attach(kid.weights)
> plot(weight,height,pch=as.character(gender))
> ## find the BMI -- body mass index
> m.ht = height*2.54/100        # 2.54 cm per inch
> m.wt = weight / 2.2046        # 2.2046 lbs. per kg
> bmi = m.wt/m.ht^2
> hist(bmi)
> 
> 
> 
> cleanEx()

detaching 'kid.weights'

> nameEx("last.tie")
> ### * last.tie
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: last.tie
> ### Title: Last tie in 100 coin tosses
> ### Aliases: last.tie
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(last.tie)
> hist(last.tie)
> 
> 
> 
> cleanEx()
> nameEx("lawsuits")
> ### * lawsuits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lawsuits
> ### Title: Law suit settlements
> ### Aliases: lawsuits
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(lawsuits)
> mean(lawsuits)
[1] 34435.12
> median(lawsuits)
[1] 6038.5
> 
> 
> 
> cleanEx()
> nameEx("lorem")
> ### * lorem
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lorem
> ### Title: Placeholder text
> ### Aliases: lorem
> ### Keywords: datasets
> 
> ### ** Examples
> 
> table(unlist(strsplit(lorem, "")))

 \n       ,   .   ;   A   C   D   E   F   I   L   M   N   P   Q   S   U   V   a 
 10 589  48  73   1   3   5   8   3   2   8   3   7  13   6   2   7   3   5 251 
  b   c   d   e   f   g   h   i   j   l   m   n   o   p   q   r   s   t   u   v 
 38 156 102 370  22  45  17 343   4 220 142 211 174  80  30 183 272 289 289  49 
  x 
  3 
> 
> 
> 
> cleanEx()
> nameEx("malpract")
> ### * malpract
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: malpract
> ### Title: malpractice settlements
> ### Aliases: malpract
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(malpract)
> boxplot(malpract)
> 
> 
> 
> cleanEx()
> nameEx("mandms")
> ### * mandms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mandms
> ### Title: Proportions of colors in various M and M's varieties
> ### Aliases: mandms
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(mandms)
> bagfull = c(15,34,7,19,29,24)
> names(bagfull) = c("blue","brown","green","orange","red","yellow")
> prop = function(x) x/sum(x)
> chisq.test(bagfull,p = prop(mandms["milk chocolate",]))

	Chi-squared test for given probabilities

data:  bagfull
X-squared = 7.0651, df = 5, p-value = 0.2158

> chisq.test(bagfull,p = prop(mandms["Peanut",]))

	Chi-squared test for given probabilities

data:  bagfull
X-squared = 13.328, df = 5, p-value = 0.02049

> 
> 
> 
> cleanEx()
> nameEx("math")
> ### * math
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: math
> ### Title: Standardized math scores
> ### Aliases: math
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(math)
> hist(math)
> 
> 
> 
> cleanEx()
> nameEx("maydow")
> ### * maydow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: maydow
> ### Title: Dow Jones industrial average and May maximum temperature
> ### Aliases: maydow
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(maydow)
> attach(maydow)
> plot(max.temp,DJA)
> plot(max.temp[-1],diff(DJA))
> 
> 
> 
> cleanEx()

detaching 'maydow'

> nameEx("midsize")
> ### * midsize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: midsize
> ### Title: Price of new and used of three mid-sized cars
> ### Aliases: midsize
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(midsize)
> plot(Accord ~ I(2004-Year), data = midsize)
> 
> 
> 
> cleanEx()
> nameEx("movie_data_2011")
> ### * movie_data_2011
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: movie_data_2011
> ### Title: Movie data for 2011 by weekend
> ### Aliases: movie_data_2011
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(movie_data_2011)
> 
> 
> 
> cleanEx()
> nameEx("movies")
> ### * movies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: movies
> ### Title: Data frome on top 25 movies for some week, many weeks ago
> ### Aliases: movies
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(movies)
> boxplot(movies$previous)
> 
> 
> 
> cleanEx()
> nameEx("mw.ages")
> ### * mw.ages
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mw.ages
> ### Title: Age distribution in year 2000 in Maplewood New Jersey
> ### Aliases: mw.ages
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(mw.ages)
> barplot(mw.ages$Male + mw.ages$Female)
> 
> 
> 
> cleanEx()
> nameEx("nba.draft")
> ### * nba.draft
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nba.draft
> ### Title: NBA draft lottery odds for 2002
> ### Aliases: nba.draft
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(nba.draft)
> top.pick = sample(row.names(nba.draft),1,prob = nba.draft$Balls)
> 
> 
> 
> cleanEx()
> nameEx("normtemp")
> ### * normtemp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normtemp
> ### Title: Body temperature and heart rate of 130 health individuals
> ### Aliases: normtemp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(normtemp)
> hist(normtemp$temperature)
> t.test(normtemp$temperature,mu=98.2)

	One Sample t-test

data:  normtemp$temperature
t = 0.76559, df = 129, p-value = 0.4453
alternative hypothesis: true mean is not equal to 98.2
95 percent confidence interval:
 98.12200 98.37646
sample estimates:
mean of x 
 98.24923 

> summary(lm(temperature ~ factor(gender), normtemp))

Call:
lm(formula = temperature ~ factor(gender), data = normtemp)

Residuals:
     Min       1Q   Median       3Q      Max 
-1.99385 -0.47154  0.00615  0.40615  2.40615 

Coefficients:
                Estimate Std. Error  t value Pr(>|t|)    
(Intercept)     98.10462    0.08949 1096.298   <2e-16 ***
factor(gender)2  0.28923    0.12655    2.285   0.0239 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.7215 on 128 degrees of freedom
Multiple R-squared:  0.03921,	Adjusted R-squared:  0.0317 
F-statistic: 5.223 on 1 and 128 DF,  p-value: 0.02393

> 
> 
> 
> cleanEx()
> nameEx("npdb")
> ### * npdb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: npdb
> ### Title: National Practioner Data Bank
> ### Aliases: npdb
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(npdb)
> table(table(npdb$ID))		# big offenders

   1    2    3    4    5    6    8   11   15   22   73 
6105  235   12    4    7    1    1    1    1    1    1 
> hist(log(npdb$amount))		# log normal?
> 
> 
> 
> cleanEx()
> nameEx("nym.2002")
> ### * nym.2002
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nym.2002
> ### Title: Random sample of 2002 New York City Marathon finishers
> ### Aliases: nym.2002
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(nym.2002)
> with(nym.2002, cor(time,age))
[1] 0.1898672
> 
> 
> 
> cleanEx()
> nameEx("oral.lesion")
> ### * oral.lesion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: oral.lesion
> ### Title: Oral lesion location by town
> ### Aliases: oral.lesion
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(oral.lesion)
> chisq.test(oral.lesion)$p.value
Warning in chisq.test(oral.lesion) :
  Chi-squared approximation may be incorrect
[1] 0.1400186
> chisq.test(oral.lesion,simulate.p.value=TRUE)$p.value ## exact is.0269
[1] 0.02898551
> 
> 
> 
> cleanEx()
> nameEx("ozonemonthly")
> ### * ozonemonthly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ozonemonthly
> ### Title: Monthly mean ozone values at Halley Bay Antartica
> ### Aliases: ozonemonthly
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(ozonemonthly)
> ## notice decay in the 80s
> plot(ozonemonthly)
> ## October plot shows dramatic swing
> monthplot(ozonemonthly)
> 
> 
> 
> cleanEx()
> nameEx("paradise")
> ### * paradise
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: paradise
> ### Title: Annual snowfall at Paradise Ranger Station, Mount Ranier
> ### Aliases: paradise
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(zoo)
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

> data(paradise)
> range(paradise, na.rm=TRUE)
[1]  313 1122
> plot(paradise)
> 
> 
> 
> cleanEx()

detaching 'package:zoo'

> nameEx("pi2000")
> ### * pi2000
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pi2000
> ### Title: first 2000 digits of pi
> ### Aliases: pi2000
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(pi2000)
> chisq.test(table(pi2000))

	Chi-squared test for given probabilities

data:  table(pi2000)
X-squared = 4.42, df = 9, p-value = 0.8817

> 
> 
> 
> cleanEx()
> nameEx("primes")
> ### * primes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: primes
> ### Title: Primes numbers less than 2003
> ### Aliases: primes
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(primes)
> diff(primes)
  [1]  1  2  2  4  2  4  2  4  6  2  6  4  2  4  6  6  2  6  4  2  6  4  6  8  4
 [26]  2  4  2  4 14  4  6  2 10  2  6  6  4  6  6  2 10  2  4  2 12 12  4  2  4
 [51]  6  2 10  6  6  6  2  6  4  2 10 14  4  2  4 14  6 10  2  4  6  8  6  6  4
 [76]  6  8  4  8 10  2 10  2  6  4  6  8  4  2  4 12  8  4  8  4  6 12  2 18  6
[101] 10  6  6  2  6 10  6  6  2  6  6  4  2 12 10  2  4  6  6  2 12  4  6  8 10
[126]  8 10  8  6  6  4  8  6  4  8  4 14 10 12  2 10  2  4  2 10 14  4  2  4 14
[151]  4  2  4 20  4  8 10  8  4  6  6 14  4  6  6  8  6 12  4  6  2 10  2  6 10
[176]  2 10  2  6 18  4  2  4  6  6  8  6  6 22  2 10  8 10  6  6  8 12  4  6  6
[201]  2  6 12 10 18  2  4  6  2  6  4  2  4 12  2  6 34  6  6  8 18 10 14  4  2
[226]  4  6  8  4  2  6 12 10  2  4  2  4  6 12 12  8 12  6  4  6  8  4  8  4 14
[251]  4  6  2  4  6  2  6 10 20  6  4  2 24  4  2 10 12  2 10  8  6  6  6 18  6
[276]  4  2 12 10 12  8 16 14  6  4  2  4  2 10 12  6  6 18  2 16  2 22  6  8  6
[301]  4  2  4
> 
> 
> 
> cleanEx()
> nameEx("puerto")
> ### * puerto
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: puerto
> ### Title: Incomes for Puerto Rican immigrants to Miami
> ### Aliases: puerto
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(puerto)
> hist(puerto)
> 
> 
> 
> cleanEx()
> nameEx("rat")
> ### * rat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rat
> ### Title: Survival times of 20 rats exposed to radiation
> ### Aliases: rat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(rat)
> hist(rat)
> 
> 
> 
> cleanEx()
> nameEx("reaction.time")
> ### * reaction.time
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reaction.time
> ### Title: Reaction time with cell phone usage
> ### Aliases: reaction.time
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(reaction.time)
> boxplot(time ~ control, data = reaction.time)
> 
> 
> 
> cleanEx()
> nameEx("reddrum")
> ### * reddrum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reddrum
> ### Title: Growth of red drum
> ### Aliases: reddrum
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(reddrum)
> plot(length ~ age, reddrum)
> 
> 
> 
> cleanEx()
> nameEx("salmon.rate")
> ### * salmon.rate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: salmon.rate
> ### Title: Simulated Data on Rate of Recruitment for Salmon
> ### Aliases: salmon.rate
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(salmon.rate)
> hist(log(salmon.rate))
> 
> 
> 
> cleanEx()
> nameEx("salmonharvest")
> ### * salmonharvest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: salmonharvest
> ### Title: Salmon harvest in Alaska from 1980 to 1998
> ### Aliases: salmonharvest
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(salmonharvest)
> acf(salmonharvest)
> 
> 
> 
> cleanEx()
> nameEx("samhda")
> ### * samhda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: samhda
> ### Title: Substance Abuse and Mental Health Data for teens
> ### Aliases: samhda
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(samhda)
> attach(samhda)
> table(amt.smoke)
amt.smoke
  1   2   3   4   5   6   7  98  99 
 32   7  13  10  14  43 105 358  18 
> 
> 
> 
> cleanEx()

detaching 'samhda'

> nameEx("scatter.with.hist")
> ### * scatter.with.hist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scatter.with.hist
> ### Title: Scatterplot with histograms
> ### Aliases: scatter.with.hist
> ### Keywords: hplot multivariate
> 
> ### ** Examples
> 
> data(emissions)
> attach(emissions)
The following object is masked from package:datasets:

    CO2

> scatter.with.hist(perCapita,CO2)
> 
> 
> 
> cleanEx()

detaching 'emissions'

> nameEx("scrabble")
> ### * scrabble
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scrabble
> ### Title: Distribution of Scrabble pieces
> ### Aliases: scrabble
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(scrabble)
> ## perform chi-squared analysis on long string. Is it in English?
> quote = " R is a language and environment for statistical computing  \
+ and graphics. It is a GNU project which is similar to the S language \
+ and environment which was developed at Bell Laboratories (formerly   \
+ AT&T, now Lucent Technologies) by John Chambers and colleagues. R    \
+ can be considered as a different implementation of S. There are      \
+ some important differences, but much code written for S runs         \
+ unaltered under R."
> quote.lc = tolower(quote)
> quote = unlist(strsplit(quote.lc,""))
> ltr.dist = sapply(c(letters," "),function(x) sum(quote == x))
> chisq.test(ltr.dist,,scrabble$freq)

	Chi-squared test for given probabilities

data:  ltr.dist
X-squared = 520.3, df = 26, p-value < 2.2e-16

> 
> 
> 
> 
> cleanEx()
> nameEx("simple.chutes")
> ### * simple.chutes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.chutes
> ### Title: simulate a chutes and ladder game
> ### Aliases: simple.chutes
> ### Keywords: univar
> 
> ### ** Examples
> 
> plot(simple.chutes(sim=TRUE))
> 
> 
> 
> cleanEx()
> nameEx("simple.densityplot")
> ### * simple.densityplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.densityplot
> ### Title: Plots densities of data
> ### Aliases: simple.densityplot simple.densityplot.default
> ###   simple.densityplot.formula dnstyplt
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## taken from boxplot
> ## using a formula
> data(InsectSprays)
> simple.densityplot(count ~ spray, data = InsectSprays)
> ## on a matrix (data frame)
> mat <- cbind(Uni05 = (1:100)/21, Norm = rnorm(100),
+              T5 = rt(100, df = 5), Gam2 = rgamma(100, shape = 2))
> simple.densityplot(data.frame(mat))
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("simple.eda")
> ### * simple.eda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.eda
> ### Title: Simple function to plot histogram, boxplot and normal plot
> ### Aliases: simple.eda
> ### Keywords: univar hplot
> 
> ### ** Examples
> 
>   x<- rnorm(100,5,10)
>   simple.eda(x)
> 
> 
> 
> cleanEx()
> nameEx("simple.eda.ts")
> ### * simple.eda.ts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.eda.ts
> ### Title: Makes 3 useful graphs for eda of times series
> ### Aliases: simple.eda.ts
> ### Keywords: univar
> 
> ### ** Examples
> 
> ## The function is currently defined as
> 
> ## look for no correlation
> x <- rnorm(100);simple.eda.ts(x)
> ## you will find correlation here
> simple.eda.ts(cumsum(x))
> 
> 
> 
> cleanEx()
> nameEx("simple.fancy.stripchart")
> ### * simple.fancy.stripchart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.fancy.stripchart
> ### Title: Makes a fancier strip chart: plots means and a line
> ### Aliases: simple.fancy.stripchart
> ### Keywords: hplot
> 
> ### ** Examples
> 
> x = rnorm(10);y=rnorm(10,1)
> simple.fancy.stripchart(list(x=x,y=y))
> 
> 
> 
> cleanEx()
> nameEx("simple.freqpoly")
> ### * simple.freqpoly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.freqpoly
> ### Title: Simply plot histogram and frequency polygon
> ### Aliases: simple.freqpoly
> ### Keywords: univar hplot
> 
> ### ** Examples
> 
> x <- rt(100,4)
> simple.freqpoly(x)
> 
> 
> 
> cleanEx()
> nameEx("simple.hist.and.boxplot")
> ### * simple.hist.and.boxplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.hist.and.boxplot
> ### Title: A function to plot both a histogram and a boxplot
> ### Aliases: simple.hist.and.boxplot simple.plot.hist.and.box
> ### Keywords: univar aplot
> 
> ### ** Examples
> 
> x<-rnorm(100)
> simple.hist.and.boxplot(x)
> 
> 
> 
> cleanEx()
> nameEx("simple.lag")
> ### * simple.lag
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.lag
> ### Title: applies function to moving subsets of a data vector
> ### Aliases: simple.lag
> ### Keywords: ts univar
> 
> ### ** Examples
> 
> ## find a moving average of the dow daily High
> data(dowdata)
> lag = 50; n = length(dowdata$High)
> plot(simple.lag(dowdata$High,lag),type="l")
> lines(dowdata$High[lag:n])
> 
> 
> 
> cleanEx()
> nameEx("simple.lm")
> ### * simple.lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.lm
> ### Title: Simplify usage of lm
> ### Aliases: simple.lm
> ### Keywords: regression
> 
> ### ** Examples
> 
> ## on simulated data
> x<-1:10
> y<-5*x + rnorm(10,0,1)
> tmp<-simple.lm(x,y)
> summary(tmp)

Call:
lm(formula = y ~ x)

Residuals:
    Min      1Q  Median      3Q     Max 
-0.9800 -0.6410  0.2338  0.2678  1.5452 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.16882    0.55270  -0.305    0.768    
x            5.05473    0.08908  56.747 1.03e-11 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.8091 on 8 degrees of freedom
Multiple R-squared:  0.9975,	Adjusted R-squared:  0.9972 
F-statistic:  3220 on 1 and 8 DF,  p-value: 1.032e-11

> 
> ## predict values
> simple.lm(x,y,pred=c(5,6,7))
       1        2        3 
25.10484 30.15957 35.21430 

Call:
lm(formula = y ~ x)

Coefficients:
(Intercept)            x  
    -0.1688       5.0547  

> 
> 
> 
> cleanEx()
> nameEx("simple.median.test")
> ### * simple.median.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.median.test
> ### Title: Do simple sign test for median - no ranks
> ### Aliases: simple.median.test
> ### Keywords: htest
> 
> ### ** Examples
> 
> x<-c(12,2,17,25,52,8,1,12)
> simple.median.test(x,20)
[1] 0.2890625
> 
> 
> 
> cleanEx()
> nameEx("simple.scatterplot")
> ### * simple.scatterplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.scatterplot
> ### Title: Simple scatter plot of x versus y with histograms of each
> ### Aliases: simple.scatterplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
>   x<-sort(rnorm(100))
>   y<-sort(rt(100,3))
>   simple.scatterplot(x,y)
> 
> 
> 
> 
> cleanEx()
> nameEx("simple.sim")
> ### * simple.sim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.sim
> ### Title: Simplify the process of simulation
> ### Aliases: simple.sim
> ### Keywords: univar datagen
> 
> ### ** Examples
> 
> ## First shows trivial (and very unnecessary usage)
> ## define a function f and then simulate
> f<-function() rnorm(1)     # create a single random real number
> sim <- simple.sim(100,f)   # create 100 random normal numbers
> hist(sim)
> 
> ## what does range look like?
> f<- function (n,mu=0,sigma=1) {
+   tmp <- rnorm(n,mu,sigma)
+   max(tmp) - min(tmp)
+ }
> sim <- simple.sim(100,f,5)
> hist(sim)
> 
> 
> 
> cleanEx()
> nameEx("simple.violinplot")
> ### * simple.violinplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.violinplot
> ### Title: Plots violinplots instead of boxplots
> ### Aliases: simple.violinplot simple.violinplot.formula
> ###   simple.violinplot.default vlnplt
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## make a "violin"
> x <- rnorm(100) ;x[101:150] <- rnorm(50,5)
> simple.violinplot(x,col="brown")
> f<-factor(rep(1:5,30))
> ## make a quintet. Note also choice of bandwidth
> simple.violinplot(x~f,col="brown",bw="SJ")
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("simple.z.test")
> ### * simple.z.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simple.z.test
> ### Title: Implement basic z-test for illustrative purposes
> ### Aliases: simple.z.test
> ### Keywords: univar
> 
> ### ** Examples
> 
>   x<-rnorm(10,0,5)
>   simple.z.test(x,5)
[1] -2.437961  3.759989
> 
> 
> 
> cleanEx()
> nameEx("skateranks")
> ### * skateranks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: skateranks
> ### Title: Judges scores for disputed ice skating competition
> ### Aliases: skateranks
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(skateranks)
> 
> 
> 
> cleanEx()
> nameEx("slc")
> ### * slc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: slc
> ### Title: Sodium-Lithium countertransport
> ### Aliases: slc
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(slc)
> hist(slc)
> 
> 
> 
> cleanEx()
> nameEx("smokyph")
> ### * smokyph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: smokyph
> ### Title: Water pH levels at 75 water samples in the Great Smoky Mountains
> ### Aliases: smokyph
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(smokyph)
> plot(smokyph$elev,smokyph$waterph)
> 
> 
> 
> cleanEx()
> nameEx("snacks")
> ### * snacks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: snacks
> ### Title: Snack data from the USDA
> ### Aliases: snacks
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(snacks)
> 
> 
> 
> cleanEx()
> nameEx("south")
> ### * south
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: south
> ### Title: Murder rates for 30 Southern US cities
> ### Aliases: south
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(south)
> hist(south)
> 
> 
> 
> cleanEx()
> nameEx("southernosc")
> ### * southernosc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: southernosc
> ### Title: Southern Oscillations
> ### Aliases: southernosc
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(southernosc)
> plot(southernosc)
> 
> 
> 
> cleanEx()
> nameEx("sp500.excess")
> ### * sp500.excess
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sp500.excess
> ### Title: Excess returns of S&P 500
> ### Aliases: sp500.excess
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(sp500.excess)
> plot(sp500.excess)
> 
> 
> 
> cleanEx()
> nameEx("squareplot")
> ### * squareplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: squareplot
> ### Title: Create a squareplot alternative to a segmented barplot
> ### Aliases: squareplot
> ### Keywords: hplot univar
> 
> ### ** Examples
> 
> ## A Roger Clemens Cy Young year -- roids?
> squareplot(c(21,7,6),col=c("blue","green","white"))
> 
> 
> 
> cleanEx()
> nameEx("stud.recs")
> ### * stud.recs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stud.recs
> ### Title: Student records
> ### Aliases: stud.recs
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(stud.recs)
> hist(stud.recs$sat.v)
> with(stud.recs,cor(sat.v,sat.m))
[1] 0.4373411
> 
> 
> 
> cleanEx()
> nameEx("student.expenses")
> ### * student.expenses
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: student.expenses
> ### Title: Some simulated data on student expenses
> ### Aliases: student.expenses
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(student.expenses)
> attach(student.expenses)
> table(dial.up,cable.modem)
       cable.modem
dial.up N Y
      N 5 2
      Y 3 0
> 
> 
> 
> cleanEx()

detaching 'student.expenses'

> nameEx("superbarplot")
> ### * superbarplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: superbarplot
> ### Title: super segmented barplot
> ### Aliases: superbarplot
> ### Keywords: hplot multivariate
> 
> ### ** Examples
> 
> record.high=c(95,95,93,96,98,96,97,96,95,97)
> record.low= c(49,47,48,51,49,48,52,51,49,52)
> normal.high=c(78,78,78,79,79,79,79,80,80,80)
> normal.low= c(62,62,62,63,63,63,64,64,64,64)
> actual.high=c(80,78,80,68,83,83,73,75,77,81)
> actual.low =c(62,65,66,58,69,63,59,58,59,60)
> x=rbind(record.low,record.high,normal.low,normal.high,actual.low,actual.high)
> the.names=c("S","M","T","W","T","F","S")[c(3:7,1:5)]
> superbarplot(x,names=the.names)
> 
> 
> 
> 
> cleanEx()
> nameEx("tastesgreat")
> ### * tastesgreat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tastesgreat
> ### Title: Does new goo taste great?
> ### Aliases: tastesgreat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(tastesgreat)
> summary(glm(enjoyed ~ gender + age, data=tastesgreat, family=binomial))

Call:
glm(formula = enjoyed ~ gender + age, family = binomial, data = tastesgreat)

Deviance Residuals: 
     Min        1Q    Median        3Q       Max  
-1.84192  -0.88512  -0.06624   0.74655   2.55961  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)   
(Intercept) -8.18443    3.09644  -2.643  0.00821 **
genderMale   2.42241    0.95590   2.534  0.01127 * 
age          0.16491    0.06519   2.530  0.01142 * 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 55.452  on 39  degrees of freedom
Residual deviance: 38.981  on 37  degrees of freedom
AIC: 44.981

Number of Fisher Scoring iterations: 5

> 
> 
> 
> cleanEx()
> nameEx("tcm1y")
> ### * tcm1y
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tcm1y
> ### Title: One-year treasury security values
> ### Aliases: tcm1y
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(tcm1y)
> ar(diff(log(tcm1y)))

Call:
ar(x = diff(log(tcm1y)))

Coefficients:
      1        2        3        4        5        6  
 0.4788  -0.1389   0.0646  -0.0045   0.0205  -0.1141  

Order selected 6  sigma^2 estimated as  0.00374
> 
> 
> 
> cleanEx()
> nameEx("tempsalinity")
> ### * tempsalinity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tempsalinity
> ### Title: Temperature/Salinity measurements along a moving Eddy
> ### Aliases: tempsalinity
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(tempsalinity)
> if(require(zoo)) {
+   plot(tempsalinity[,3:4])
+   ## overide plot.zoo method
+   plot.default(tempsalinity[,3:4])
+   abline(lm(salinity ~ temperature, tempsalinity, subset = 1:67))
+   abline(lm(salinity ~ temperature, tempsalinity, subset = -(1:67)))
+   }
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

> 
> 
> 
> cleanEx()

detaching 'package:zoo'

> nameEx("too.young")
> ### * too.young
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: too.young
> ### Title: What age is too young for a male to data a female?
> ### Aliases: too.young
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(too.young)
> lm(Female ~ Male, data=too.young)

Call:
lm(formula = Female ~ Male, data = too.young)

Coefficients:
(Intercept)         Male  
     5.4720       0.5754  

> 
> 
> 
> cleanEx()
> nameEx("twins")
> ### * twins
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: twins
> ### Title: Burt's IQ data for twins
> ### Aliases: twins
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(twins)
> plot(Foster ~ Biological, twins)
> 
> 
> 
> cleanEx()
> nameEx("u2")
> ### * u2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: u2
> ### Title: Song and lengths for U2 albums
> ### Aliases: u2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(u2)
> sapply(u2,mean)			# average track length
          Achtung Baby                    Boy                October 
              277.2500               230.2727               224.4545 
                   Pop           Rattle & Hum        The Joshua Tree 
              300.4167               255.2353               273.7273 
The Unforgettable Fire  Under A Blood Red Sky                    War 
              256.0000               254.0000               228.9000 
               Zooropa 
              300.9000 
> max(sapply(u2,max))		# longest track length
[1] 416
> sort(unlist(u2))		# lengths in sorted order
                      Rattle & Hum. (Freedom For My People) 
                                                         38 
                   Rattle & Hum. (The Star Spangled Banner) 
                                                         43 
                                             Boy. The Ocean 
                                                         94 
                                        Boy. Into the Heart 
                                                        113 
                        The Unforgettable Fire. 4th Of July 
                                                        135 
                                           October. October 
                                                        141 
                                War. Two Hearts Beat As One 
                                                        141 
                          The Unforgettable Fire. Promenade 
                                                        152 
                                The Unforgettable Fire. MLK 
                                                        152 
                          Under A Blood Red Sky. Party Girl 
                                                        172 
                                           October. Scarlet 
                                                        173 
                                                    War. 40 
                                                        173 
                          The Joshua Tree. In God's Country 
                                                        177 
                                       Rattle & Hum. Desire 
                                                        179 
                                      October. Is That All? 
                                                        180 
                                      Boy. Stories for Boys 
                                                        182 
                            Rattle & Hum. Van Diemen's Land 
                                                        186 
                               Rattle & Hum. Helter Skelter 
                                                        187 
                                      Boy. A Day Without Me 
                                                        194 
                                  Rattle & Hum. God Part II 
                                                        195 
                   The Joshua Tree. Trip Through Your Wires 
                                                        212 
                                         Boy. I Will Follow 
                                                        216 
                       Under A Blood Red Sky. I Will Follow 
                                                        216 
                                  Under A Blood Red Sky. 40 
                                                        216 
                                           October. Rejoice 
                                                        218 
                                        War. Like A Song... 
                                                        218 
                                       October. I Fall Down 
                                                        219 
                                               War. Seconds 
                                                        219 
              Achtung Baby. Even Better Than The Real Thing 
                                                        221 
                                    Zooropa. The First Time 
                                                        225 
                              Rattle & Hum. Angel Of Harlem 
                                                        229 
        The Unforgettable Fire. Pride (In The Name Of Love) 
                                                        229 
                                              October. Fire 
                                                        231 
                                          War. Drowning Man 
                                                        231 
   Achtung Baby. Tryin' To Throw Your Arms Around The World 
                                                        233 
                        October. Stranger In A Strange Land 
                                                        237 
                                             War. Surrender 
                                                        237 
                                          Zooropa. Babyface 
                                                        240 
                          October. With A Shout (Jerusalem) 
                                                        243 
                                             War. Red Light 
                                                        243 
                              Achtung Baby. Mysterious Ways 
                                                        244 
                                        Boy. Out of Control 
                                                        253 
                                            October. Gloria 
                                                        253 
                                      The Joshua Tree. Exit 
                                                        253 
                                  War. Sunday Bloody Sunday 
                                                        253 
                      Rattle & Hum. When Love Comes To Town 
                                                        254 
                  Zooropa. Some Days Are Better Than Others 
                                                        255 
                    The Joshua Tree. Running To Stand Still 
                                                        258 
                  The Unforgettable Fire. Indian Summer Sky 
                                                        258 
                                              Zooropa. Numb 
                                                        258 
                               The Unforgettable Fire. Wire 
                                                        259 
                                              Boy. Twilight 
                                                        262 
                            Achtung Baby. Love Is Blindness 
                                                        263 
                     Rattle & Hum. All Along The Watchtower 
                                                        264 
                                                  Pop. Gone 
                                                        266 
                  Rattle & Hum. Pride (In The Name Of Love) 
                                                        267 
                                      Achtung Baby. The Fly 
                                                        269 
                      Under A Blood Red Sky. New Year's Day 
                                                        269 
                                      Achtung Baby. Acrobat 
                                                        270 
                       The Joshua Tree. Bullet The Blue Sky 
                                                        272 
                              Under A Blood Red Sky. Gloria 
                                                        272 
                           Boy. Another Time, Another Place 
                                                        274 
                Under A Blood Red Sky. 11 O'Clock Tick Tock 
                                                        274 
                                  Achtung Baby. Zoo Station 
                                                        276 
                                          Achtung Baby. One 
                                                        276 
                                Boy. Shadows and Tall Trees 
                                                        276 
                                    Pop. Staring At The Sun 
                                                        276 
The Joshua Tree. I Still Haven't Found What I'm Looking For 
                                                        277 
                   Achtung Baby. Until The End Of The World 
                                                        279 
                                          October. Tomorrow 
                                                        279 
                                         War. The Refugee * 
                                                        279 
                                   Pop. The Playboy Mansion 
                                                        280 
                                      Zooropa. The Wanderer 
                                                        284 
                                   Pop. Last Night On Earth 
                                                        285 
                                      Boy. The Electric Co. 
                                                        288 
                                                 Pop. Miami 
                                                        292 
                                      Pop. Wake Up Dead Man 
                                                        292 
                      The Joshua Tree. Red Hill Mining Town 
                                                        292 
                  October. I Threw A Brick Through A Window 
                                                        295 
             The Unforgettable Fire. The Unforgettable Fire 
                                                        295 
                Under A Blood Red Sky. Sunday Bloody Sunday 
                                                        295 
                                        War. New Year's Day 
                                                        295 
                       The Joshua Tree. With Or Without You 
                                                        296 
                         Zooropa. Stay (Faraway, So Close!) 
                                                        298 
                                                Pop. Please 
                                                        302 
                                    Rattle & Hum. Heartland 
                                                        302 
                                     Pop. Do You Feel Loved 
                                                        307 
                The Joshua Tree. Mothers Of The Disappeared 
                                                        314 
                         Pop. If You Wear That Velvet Dress 
                                                        315 
            Achtung Baby. Who's Gonna Ride Your Wild Horses 
                                                        316 
                    Under A Blood Red Sky. The Electric Co. 
                                                        318 
                                           Pop. Discotheque 
                                                        319 
            Zooropa. Daddy's Gonna Pay For Your Crashed Car 
                                                        319 
                           Pop. If God Will Send His Angels 
                                                        322 
                             The Joshua Tree. One Tree Hill 
                                                        323 
                                         Zooropa. Dirty Day 
                                                        324 
               The Unforgettable Fire. A Sort Of Homecoming 
                                                        329 
                   Achtung Baby. Ultraviolet (Light My Way) 
                                                        331 
                          Rattle & Hum. Bullet The Blue Sky 
                                                        337 
            The Joshua Tree. Where The Streets Have No Name 
                                                        337 
                                     Achtung Baby. So Cruel 
                                                        349 
                                                  Pop. Mofo 
                                                        349 
                              Rattle & Hum. Silver and Gold 
                                                        350 
   Rattle & Hum. I Still Haven't Found What I'm Looking For 
                                                        353 
                                The Unforgettable Fire. Bad 
                                                        369 
                                           Boy. An Cat Dubh 
                                                        381 
                                 Rattle & Hum. Hawkmoon 269 
                                                        382 
          The Unforgettable Fire. Elvis Presley and America 
                                                        382 
                               Rattle & Hum. Love Rescue Me 
                                                        383 
                            Rattle & Hum. All I Want Is You 
                                                        390 
                                           Zooropa. Zooropa 
                                                        390 
                                             Zooropa. Lemon 
                                                        416 
> 
> 
> 
> cleanEx()
> nameEx("urchin.growth")
> ### * urchin.growth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: urchin.growth
> ### Title: Data on growth of sea urchins
> ### Aliases: urchin.growth
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(urchin.growth)
> plot(jitter(size) ~ jitter(age), data=urchin.growth)
> 
> 
> 
> cleanEx()
> nameEx("vacation")
> ### * vacation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vacation
> ### Title: vacation days
> ### Aliases: vacation
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(vacation)
> hist(vacation)
> 
> 
> 
> cleanEx()
> nameEx("violinplot")
> ### * violinplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: violinplot
> ### Title: Plots violinplots instead of boxplots
> ### Aliases: violinplot violinplot.default violinplot.formula
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## make a "violin"
> x <- rnorm(100) ;x[101:150] <- rnorm(50,5)
> violinplot(x,col="brown")
> f<-factor(rep(1:5,30))
> ## make a quintet. Note also choice of bandwidth
> violinplot(x~f,col="brown",bw="SJ")
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("watertemp")
> ### * watertemp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: watertemp
> ### Title: Temperature measurement of water at 85m depth
> ### Aliases: watertemp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> if(require(zoo)) {
+ data(watertemp)	 
+ plot(watertemp)
+ acf(watertemp)
+ acf(diff(watertemp))
+ }
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

> 
> 
> 
> cleanEx()

detaching 'package:zoo'

> nameEx("wchomes")
> ### * wchomes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wchomes
> ### Title: A random sample of Wake County, North Carolina residential real
> ###   estate plots
> ### Aliases: wchomes
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(wchomes)
> 
> 
> 
> cleanEx()
> nameEx("wellbeing")
> ### * wellbeing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wellbeing
> ### Title: What makes us happy?
> ### Aliases: wellbeing
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(wellbeing)
> 
> 
> 
> cleanEx()
> nameEx("yellowfin")
> ### * yellowfin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: yellowfin
> ### Title: Yellow fin tuna catch rate in Tropical Indian Ocean
> ### Aliases: yellowfin
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(yellowfin)
> plot(yellowfin)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.26 0.87 2.77 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
