
R version 4.2.3 (2023-03-15 ucrt) -- "Shortstop Beagle"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "statsr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('statsr')
Loading required package: BayesFactor
Loading required package: coda
Loading required package: Matrix
************
Welcome to BayesFactor 0.9.12-4.4. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).

Type BFManual() to open the manual.
************
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BF_app")
> ### * BF_app
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BF_app
> ### Title: Run the interactive Bayes Factor shiny app
> ### Aliases: BF_app
> 
> ### ** Examples
> 
> if (interactive()) { 
+ BF.app()
+ }
> 
> 
> 
> cleanEx()
> nameEx("ames_sampling_dist")
> ### * ames_sampling_dist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ames_sampling_dist
> ### Title: Simulate Sampling Distribution
> ### Aliases: ames_sampling_dist
> 
> ### ** Examples
> 
> if (interactive()) { 
+   ames_sampling_dist()
+ }
> 
> 
> 
> cleanEx()
> nameEx("bandit_posterior")
> ### * bandit_posterior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bandit_posterior
> ### Title: bandit posterior
> ### Aliases: bandit_posterior
> 
> ### ** Examples
> 
> data = data.frame(machine = c(1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L), 
+                   outcome = c("W", "L", "W", "L", "L", "W", "L", "L", "L", "W"))
> bandit_posterior(data)
m1_good m2_good 
    0.5     0.5 
> plot_bandit_posterior(data)
> 
> 
> 
> 
> cleanEx()
> nameEx("bandit_sim")
> ### * bandit_sim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bandit_sim
> ### Title: Run the Bandit Simulation shiny app
> ### Aliases: bandit_sim
> 
> ### ** Examples
> 
> if (interactive()) {
+ # run interactive shiny app to generate wins and losses
+ bandit_sim()
+ }
> # paste data from the shiny app into varible
> data = data.frame(
+  machine = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
+    1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
+    2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
+    2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
+    2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 
+    1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
+    2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 
+    1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L), 
+  outcome = c("W", "W", "W", "L", "W", "W", "W", "L", "W", "L", "W", "L",
+   "L", "L", "W", "L", "W", "L", "L", "L", "W", "W", "W", "L", "L", "L", 
+   "L", "L", "W", "W", "L", "L", "W", "L", "L", "W", "L", "L", "W", "L",
+   "L", "L", "L", "L", "W", "L", "L", "W", "W", "W", "W", "L", "L", "L",
+   "L", "L", "L", "W", "L", "W", "L", "W", "L", "L", "L", "L", "L", "L", "L",
+   "L", "L", "L", "W", "W", "W", "L", "W", "L", "L", "L", "L", "L", "L", "L",
+   "L", "L", "L", "W", "W", "W", "W", "W", "L", "W", "W", "L", "W", "L", "L",
+   "L", "L", "L", "W", "L", "W", "L", "L", "L", "W", "W", "W", "W", "L", "L",
+   "W", "L", "W", "L", "L", "W"))
>   bandit_posterior(data)
  m1_good   m2_good 
0.1111111 0.8888889 
>   plot_bandit_posterior(data)
> 
> 
> 
> 
> cleanEx()
> nameEx("bayes_inference")
> ### * bayes_inference
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bayes_inference
> ### Title: Bayesian hypothesis tests and credible intervals
> ### Aliases: bayes_inference
> 
> ### ** Examples
> 
> 
> # inference for the mean from a single normal population using
> # Jeffreys Reference prior, p(mu, sigma^2) = 1/sigma^2
> 
> library(BayesFactor)
> data(tapwater)
> 
> # Calculate 95% CI using quantiles from Student t derived from ref prior
> bayes_inference(tthm, data=tapwater,
+                 statistic="mean", 
+                 type="ci", prior_family="ref",
+                 method="theoretical")
Single numerical variable
n = 28, y-bar = 55.5239, s = 23.254
(Assuming improper prior: P(mu) = 1)
(Assuming improper prior: P(1/sigma^2) = (sigma^2)^-1

Joint Posterior Distribution for mu and 1/sigma^2:
 N(55.5239, sigma^2/28) G(27/2, 19.3124*27/2)

Marginal Posterior for mu:
Student t with posterior mean = 55.5239, posterior scale = 4.3946 on 27 df

95% CI: (46.507 , 64.5409)
> 
> 
> 
> cleanEx()
> nameEx("calc_streak")
> ### * calc_streak
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_streak
> ### Title: Calculate hitting streaks
> ### Aliases: calc_streak
> 
> ### ** Examples
> 
> data(kobe_basket)
> calc_streak(kobe_basket$shot)
   length
1       1
2       0
3       2
4       0
5       0
6       0
7       3
8       2
9       0
10      3
11      0
12      1
13      3
14      0
15      0
16      0
17      0
18      0
19      1
20      1
21      0
22      4
23      1
24      0
25      1
26      0
27      1
28      0
29      1
30      2
31      0
32      1
33      2
34      1
35      0
36      0
37      1
38      0
39      0
40      0
41      1
42      1
43      0
44      1
45      0
46      2
47      0
48      0
49      0
50      3
51      0
52      1
53      0
54      1
55      2
56      1
57      0
58      1
59      0
60      0
61      1
62      3
63      3
64      1
65      1
66      0
67      0
68      0
69      0
70      0
71      1
72      1
73      0
74      0
75      0
76      1
> 
> 
> 
> 
> cleanEx()
> nameEx("credible_interval_app")
> ### * credible_interval_app
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: credible_interval_app
> ### Title: Credible Interval shiny app
> ### Aliases: credible_interval_app
> 
> ### ** Examples
> 
> if (interactive()) {
+    credible_interval_app()
+ }
> 
> 
> 
> cleanEx()
> nameEx("inference")
> ### * inference
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: inference
> ### Title: Hypothesis tests and confidence intervals
> ### Aliases: inference
> 
> ### ** Examples
> 
> data(tapwater)
> 
> # Calculate 95% CI using quantiles using a Student t distribution
> inference(tthm, data=tapwater,
+                 statistic="mean", 
+                 type="ci",
+                 method="theoretical")
Single numerical variable
n = 28, y-bar = 55.5239, s = 23.254
95% CI: (46.507 , 64.5409)
>                 
> inference(tthm, data=tapwater,
+                 statistic="mean", 
+                 type="ci",
+                 boot_method = "perc",
+                 method="simulation")
Single numerical variable
n = 28, y-bar = 55.5239, s = 23.254
95% CI: (47.0977 , 64.0716)
>                 
> # Inference for a proportion
> # Calculate 95% confidence intervals for the proportion of atheists
> 
> data("atheism")
> library("dplyr")

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> us12 <- atheism %>%
+         filter(nationality == "United States" , atheism$year == "2012")
> inference(y = response, data = us12, statistic = "proportion",
+           type = "ci",
+           method = "theoretical", 
+           success = "atheist")
Single categorical variable, success: atheist
n = 1002, p-hat = 0.0499
95% CI: (0.0364 , 0.0634)
>                 
> 
> 
> 
> cleanEx()

detaching 'package:dplyr'

> nameEx("plot_bandit_posterior")
> ### * plot_bandit_posterior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_bandit_posterior
> ### Title: plot_bandit_posterior
> ### Aliases: plot_bandit_posterior
> 
> ### ** Examples
> 
> # capture data from the `shiny` app `bandit_sim`.
> data = data.frame(machine = c(1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L), 
+                   outcome = c("W", "L", "W", "L", "L", "W", "L", "L", "L", "W"))
> plot_bandit_posterior(data)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_ss")
> ### * plot_ss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_ss
> ### Title: plot_ss
> ### Aliases: plot_ss
> 
> ### ** Examples
> 
> ## Not run: plot_ss
> 
> 
> 
> cleanEx()
> nameEx("rep_sample_n")
> ### * rep_sample_n
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rep_sample_n
> ### Title: Repeating Sampling from a Tibble
> ### Aliases: rep_sample_n
> 
> ### ** Examples
> 
> data(nc)
> rep_sample_n(nc, size=10, replace=FALSE, reps=1)
# A tibble: 10 × 14
# Groups:   replicate [1]
   replicate  fage  mage mature      weeks premie   visits marital gained weight
       <int> <int> <int> <fct>       <int> <fct>     <int> <fct>    <int>  <dbl>
 1         1    35    34 younger mom    45 full te…     10 not ma…     34   8.5 
 2         1    36    30 younger mom    38 full te…     12 not ma…     19   6.5 
 3         1    21    20 younger mom    40 full te…     12 not ma…     14   7.44
 4         1    34    36 mature mom     38 full te…      4 married     25   6.88
 5         1    31    27 younger mom    40 full te…     13 married      3   7.06
 6         1    32    26 younger mom    41 full te…     14 married     19   6.56
 7         1    28    23 younger mom    39 full te…     14 not ma…     36   5.88
 8         1    NA    22 younger mom    37 full te…      9 married     41   6.25
 9         1    53    39 mature mom     33 premie        6 married     24   5.5 
10         1    22    21 younger mom    40 full te…     15 married     22   6.94
# ℹ 4 more variables: lowbirthweight <fct>, gender <fct>, habit <fct>,
#   whitemom <fct>
> 
> 
> 
> cleanEx()
> nameEx("zinc")
> ### * zinc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zinc
> ### Title: Zinc Concentration in Water
> ### Aliases: zinc
> ### Keywords: datasets
> 
> ### ** Examples
> 
>  data(zinc)
>  str(zinc)
'data.frame':	10 obs. of  4 variables:
 $ location  : int  1 2 3 4 5 6 7 8 9 10
 $ bottom    : num  0.43 0.266 0.567 0.531 0.707 0.716 0.651 0.589 0.469 0.723
 $ surface   : num  0.415 0.238 0.39 0.41 0.605 0.609 0.632 0.523 0.411 0.612
 $ difference: num  0.015 0.028 0.177 0.121 0.102 0.107 0.019 0.066 0.058 0.111
>  plot(bottom ~ surface, data=zinc)
>  # use paired t-test to test if difference in means is zero
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.78 1.1 3.77 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
